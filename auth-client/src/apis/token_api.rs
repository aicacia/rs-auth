/*
 * auth
 *
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct TokenApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> TokenApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> TokenApiClient<C> {
        TokenApiClient {
            configuration,
        }
    }
}

pub trait TokenApi: Send + Sync {
    fn token(&self, token_request: models::TokenRequest) -> Pin<Box<dyn Future<Output = Result<models::Token, Error>> + Send>>;
}

impl<C: Connect>TokenApi for TokenApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn token(&self, token_request: models::TokenRequest) -> Pin<Box<dyn Future<Output = Result<models::Token, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/token".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "Tenant-ID".to_owned(),
            }))
        ;
        req = req.with_body_param(token_request);

        req.execute(self.configuration.borrow())
    }

}
