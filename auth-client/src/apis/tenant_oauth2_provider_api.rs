/*
 * auth
 *
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`create_tenant_oauth2_provider`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTenantOauth2ProviderError {
    Status400(std::collections::HashMap<String, Vec<models::ErrorMessage>>),
    Status401(std::collections::HashMap<String, Vec<models::ErrorMessage>>),
    Status409(std::collections::HashMap<String, Vec<models::ErrorMessage>>),
    Status500(std::collections::HashMap<String, Vec<models::ErrorMessage>>),
    Status501(std::collections::HashMap<String, Vec<models::ErrorMessage>>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_tenant_oauth2_provider`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteTenantOauth2ProviderError {
    Status400(std::collections::HashMap<String, Vec<models::ErrorMessage>>),
    Status401(std::collections::HashMap<String, Vec<models::ErrorMessage>>),
    Status404(std::collections::HashMap<String, Vec<models::ErrorMessage>>),
    Status500(std::collections::HashMap<String, Vec<models::ErrorMessage>>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_tenant_oauth2_provider`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateTenantOauth2ProviderError {
    Status400(std::collections::HashMap<String, Vec<models::ErrorMessage>>),
    Status401(std::collections::HashMap<String, Vec<models::ErrorMessage>>),
    Status404(std::collections::HashMap<String, Vec<models::ErrorMessage>>),
    Status500(std::collections::HashMap<String, Vec<models::ErrorMessage>>),
    UnknownValue(serde_json::Value),
}


pub async fn create_tenant_oauth2_provider(configuration: &configuration::Configuration, tenant_id: i64, create_tenant_o_auth2_provider: models::CreateTenantOAuth2Provider, application_id: Option<i64>) -> Result<models::TenantOAuth2Provider, Error<CreateTenantOauth2ProviderError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tenant_id = tenant_id;
    let p_create_tenant_o_auth2_provider = create_tenant_o_auth2_provider;
    let p_application_id = application_id;

    let uri_str = format!("{}/tenants/{tenant_id}/oauth2-providers", configuration.base_path, tenant_id=p_tenant_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_application_id {
        req_builder = req_builder.query(&[("application_id", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_create_tenant_o_auth2_provider);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TenantOAuth2Provider`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TenantOAuth2Provider`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateTenantOauth2ProviderError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn delete_tenant_oauth2_provider(configuration: &configuration::Configuration, tenant_id: i64, tenant_oauht2_provider_id: i64, application_id: Option<i64>) -> Result<(), Error<DeleteTenantOauth2ProviderError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tenant_id = tenant_id;
    let p_tenant_oauht2_provider_id = tenant_oauht2_provider_id;
    let p_application_id = application_id;

    let uri_str = format!("{}/tenants/{tenant_id}/oauth2-providers/{tenant_oauht2_provider_id}", configuration.base_path, tenant_id=p_tenant_id, tenant_oauht2_provider_id=p_tenant_oauht2_provider_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_application_id {
        req_builder = req_builder.query(&[("application_id", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteTenantOauth2ProviderError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn update_tenant_oauth2_provider(configuration: &configuration::Configuration, tenant_id: i64, tenant_oauht2_provider_id: i64, update_tenant_o_auth2_provider: models::UpdateTenantOAuth2Provider, application_id: Option<i64>) -> Result<models::TenantOAuth2Provider, Error<UpdateTenantOauth2ProviderError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tenant_id = tenant_id;
    let p_tenant_oauht2_provider_id = tenant_oauht2_provider_id;
    let p_update_tenant_o_auth2_provider = update_tenant_o_auth2_provider;
    let p_application_id = application_id;

    let uri_str = format!("{}/tenants/{tenant_id}/oauth2-providers/{tenant_oauht2_provider_id}", configuration.base_path, tenant_id=p_tenant_id, tenant_oauht2_provider_id=p_tenant_oauht2_provider_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = p_application_id {
        req_builder = req_builder.query(&[("application_id", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_update_tenant_o_auth2_provider);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TenantOAuth2Provider`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TenantOAuth2Provider`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateTenantOauth2ProviderError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

