/*
 * auth
 *
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct UserApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> UserApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> UserApiClient<C> {
        UserApiClient {
            configuration,
        }
    }
}

pub trait UserApi: Send + Sync {
    fn create_user_email(&self, user_id: i64, service_account_create_user_email: models::ServiceAccountCreateUserEmail) -> Pin<Box<dyn Future<Output = Result<models::UserEmail, Error>> + Send>>;
    fn create_user_phone_number(&self, user_id: i64, service_account_create_user_phone_number: models::ServiceAccountCreateUserPhoneNumber) -> Pin<Box<dyn Future<Output = Result<models::UserPhoneNumber, Error>> + Send>>;
    fn delete_user_email(&self, user_id: i64, email_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn delete_user_phone_number(&self, user_id: i64, phone_number_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn update_user_email(&self, user_id: i64, email_id: i64, service_account_update_user_email: models::ServiceAccountUpdateUserEmail) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn update_user_phone_number(&self, user_id: i64, phone_number_id: i64, service_account_update_user_phone_number: models::ServiceAccountUpdateUserPhoneNumber) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
}

impl<C: Connect>UserApi for UserApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_user_email(&self, user_id: i64, service_account_create_user_email: models::ServiceAccountCreateUserEmail) -> Pin<Box<dyn Future<Output = Result<models::UserEmail, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/users/{user_id}/emails".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(service_account_create_user_email);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_user_phone_number(&self, user_id: i64, service_account_create_user_phone_number: models::ServiceAccountCreateUserPhoneNumber) -> Pin<Box<dyn Future<Output = Result<models::UserPhoneNumber, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/users/{user_id}/phone_numbers".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(service_account_create_user_phone_number);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_user_email(&self, user_id: i64, email_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/users/{user_id}/emails/{email_id}".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_path_param("email_id".to_string(), email_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_user_phone_number(&self, user_id: i64, phone_number_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/users/{user_id}/phone-numbers/{phone_number_id}".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_path_param("phone_number_id".to_string(), phone_number_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_user_email(&self, user_id: i64, email_id: i64, service_account_update_user_email: models::ServiceAccountUpdateUserEmail) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/users/{user_id}/emails/{email_id}".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_path_param("email_id".to_string(), email_id.to_string());
        req = req.with_body_param(service_account_update_user_email);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_user_phone_number(&self, user_id: i64, phone_number_id: i64, service_account_update_user_phone_number: models::ServiceAccountUpdateUserPhoneNumber) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/users/{user_id}/phone-numbers/{phone_number_id}".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_path_param("phone_number_id".to_string(), phone_number_id.to_string());
        req = req.with_body_param(service_account_update_user_phone_number);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
