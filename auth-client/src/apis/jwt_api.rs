/*
 * auth
 *
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct JwtApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> JwtApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> JwtApiClient<C> {
        JwtApiClient {
            configuration,
        }
    }
}

pub trait JwtApi: Send + Sync {
    fn create_jwt(&self, request_body: std::collections::HashMap<String, serde_json::Value>) -> Pin<Box<dyn Future<Output = Result<String, Error>> + Send>>;
    fn jwt_is_valid(&self, tenant_id: &str) -> Pin<Box<dyn Future<Output = Result<std::collections::HashMap<String, serde_json::Value>, Error>> + Send>>;
}

impl<C: Connect>JwtApi for JwtApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_jwt(&self, request_body: std::collections::HashMap<String, serde_json::Value>) -> Pin<Box<dyn Future<Output = Result<String, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/jwt".to_string())
        ;
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn jwt_is_valid(&self, tenant_id: &str) -> Pin<Box<dyn Future<Output = Result<std::collections::HashMap<String, serde_json::Value>, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/jwt".to_string())
        ;
        req = req.with_header_param("Tenant-ID".to_string(), tenant_id.to_string());

        req.execute(self.configuration.borrow())
    }

}
