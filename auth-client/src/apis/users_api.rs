/*
 * auth
 *
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct UsersApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> UsersApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> UsersApiClient<C> {
        UsersApiClient {
            configuration,
        }
    }
}

pub trait UsersApi: Send + Sync {
    fn all_users(&self, offset: Option<i32>, limit: Option<i32>) -> Pin<Box<dyn Future<Output = Result<models::Pagination, Error>> + Send>>;
    fn create_user(&self, create_user: models::CreateUser) -> Pin<Box<dyn Future<Output = Result<models::User, Error>> + Send>>;
    fn create_user_reset_password_token(&self, user_id: i64, user_reset_password: models::UserResetPassword) -> Pin<Box<dyn Future<Output = Result<models::Token, Error>> + Send>>;
    fn get_user_by_id(&self, user_id: i64) -> Pin<Box<dyn Future<Output = Result<models::Pagination, Error>> + Send>>;
}

impl<C: Connect>UsersApi for UsersApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn all_users(&self, offset: Option<i32>, limit: Option<i32>) -> Pin<Box<dyn Future<Output = Result<models::Pagination, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/users".to_string())
        ;
        if let Some(ref s) = offset {
            let query_value = s.to_string();
            req = req.with_query_param("offset".to_string(), query_value);
        }
        if let Some(ref s) = limit {
            let query_value = s.to_string();
            req = req.with_query_param("limit".to_string(), query_value);
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_user(&self, create_user: models::CreateUser) -> Pin<Box<dyn Future<Output = Result<models::User, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/users".to_string())
        ;
        req = req.with_body_param(create_user);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_user_reset_password_token(&self, user_id: i64, user_reset_password: models::UserResetPassword) -> Pin<Box<dyn Future<Output = Result<models::Token, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/users/{user_id}/reset-password".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(user_reset_password);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_user_by_id(&self, user_id: i64) -> Pin<Box<dyn Future<Output = Result<models::Pagination, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/users/{user_id}".to_string())
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

}
