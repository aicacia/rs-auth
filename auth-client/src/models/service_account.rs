/*
 * auth
 *
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceAccount {
    #[serde(rename = "active")]
    pub active: bool,
    #[serde(rename = "client_id")]
    pub client_id: uuid::Uuid,
    #[serde(rename = "client_secret", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<Option<uuid::Uuid>>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
}

impl ServiceAccount {
    pub fn new(active: bool, client_id: uuid::Uuid, created_at: String, id: i64, name: String, updated_at: String) -> ServiceAccount {
        ServiceAccount {
            active,
            client_id,
            client_secret: None,
            created_at,
            id,
            name,
            updated_at,
        }
    }
}

