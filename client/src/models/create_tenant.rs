/*
 * auth
 *
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateTenant {
    #[serde(rename = "algorithm", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub algorithm: Option<Option<models::Algorithm>>,
    #[serde(rename = "audience")]
    pub audience: String,
    #[serde(rename = "client_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<Option<uuid::Uuid>>,
    #[serde(rename = "expires_in_seconds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub expires_in_seconds: Option<Option<i64>>,
    #[serde(rename = "issuer")]
    pub issuer: String,
    #[serde(rename = "private_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub private_key: Option<Option<String>>,
    #[serde(rename = "public_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub public_key: Option<Option<String>>,
    #[serde(rename = "refresh_expires_in_seconds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub refresh_expires_in_seconds: Option<Option<i64>>,
}

impl CreateTenant {
    pub fn new(audience: String, issuer: String) -> CreateTenant {
        CreateTenant {
            algorithm: None,
            audience,
            client_id: None,
            expires_in_seconds: None,
            issuer,
            private_key: None,
            public_key: None,
            refresh_expires_in_seconds: None,
        }
    }
}

