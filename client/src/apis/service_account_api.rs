/*
 * auth
 *
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct ServiceAccountApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> ServiceAccountApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> ServiceAccountApiClient<C> {
        ServiceAccountApiClient {
            configuration,
        }
    }
}

pub trait ServiceAccountApi: Send + Sync {
    fn all_service_accounts(&self, offset: Option<i32>, limit: Option<i32>) -> Pin<Box<dyn Future<Output = Result<models::PaginationServiceAccount, Error>> + Send>>;
    fn create_service_account(&self, create_service_account: models::CreateServiceAccount) -> Pin<Box<dyn Future<Output = Result<models::ServiceAccount, Error>> + Send>>;
    fn get_service_account_by_id(&self, service_account_id: i64) -> Pin<Box<dyn Future<Output = Result<models::ServiceAccount, Error>> + Send>>;
    fn update_service_account(&self, service_account_id: i64, update_service_account: models::UpdateServiceAccount) -> Pin<Box<dyn Future<Output = Result<models::ServiceAccount, Error>> + Send>>;
}

impl<C: Connect>ServiceAccountApi for ServiceAccountApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn all_service_accounts(&self, offset: Option<i32>, limit: Option<i32>) -> Pin<Box<dyn Future<Output = Result<models::PaginationServiceAccount, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/service-accounts".to_string())
        ;
        if let Some(ref s) = offset {
            let query_value = s.to_string();
            req = req.with_query_param("offset".to_string(), query_value);
        }
        if let Some(ref s) = limit {
            let query_value = s.to_string();
            req = req.with_query_param("limit".to_string(), query_value);
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_service_account(&self, create_service_account: models::CreateServiceAccount) -> Pin<Box<dyn Future<Output = Result<models::ServiceAccount, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/service-accounts".to_string())
        ;
        req = req.with_body_param(create_service_account);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_service_account_by_id(&self, service_account_id: i64) -> Pin<Box<dyn Future<Output = Result<models::ServiceAccount, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/service-accounts/{service_account_id}".to_string())
        ;
        req = req.with_path_param("service_account_id".to_string(), service_account_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_service_account(&self, service_account_id: i64, update_service_account: models::UpdateServiceAccount) -> Pin<Box<dyn Future<Output = Result<models::ServiceAccount, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/service-accounts/{service_account_id}".to_string())
        ;
        req = req.with_path_param("service_account_id".to_string(), service_account_id.to_string());
        req = req.with_body_param(update_service_account);

        req.execute(self.configuration.borrow())
    }

}
