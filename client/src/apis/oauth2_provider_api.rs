/*
 * auth
 *
 * Aicacia Auth API provides authentication services for applications.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct Oauth2ProviderApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> Oauth2ProviderApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> Oauth2ProviderApiClient<C> {
        Oauth2ProviderApiClient {
            configuration,
        }
    }
}

pub trait Oauth2ProviderApi: Send + Sync {
    fn create_tenant_oauth2_provider(&self, tenant_id: i64, create_tenant_o_auth2_provider: models::CreateTenantOAuth2Provider) -> Pin<Box<dyn Future<Output = Result<models::TenantOAuth2Provider, Error>> + Send>>;
    fn delete_tenant_oauth2_provider(&self, tenant_id: i64, tenant_oauht2_provider_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn update_tenant_oauth2_provider(&self, tenant_id: i64, tenant_oauht2_provider_id: i64, update_tenant_o_auth2_provider: models::UpdateTenantOAuth2Provider) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
}

impl<C: Connect>Oauth2ProviderApi for Oauth2ProviderApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_tenant_oauth2_provider(&self, tenant_id: i64, create_tenant_o_auth2_provider: models::CreateTenantOAuth2Provider) -> Pin<Box<dyn Future<Output = Result<models::TenantOAuth2Provider, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/tenants/{tenant_id}/oauth2-providers".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_body_param(create_tenant_o_auth2_provider);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_tenant_oauth2_provider(&self, tenant_id: i64, tenant_oauht2_provider_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/tenants/{tenant_id}/oauth2-providers/{tenant_oauht2_provider_id}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("tenant_oauht2_provider_id".to_string(), tenant_oauht2_provider_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_tenant_oauth2_provider(&self, tenant_id: i64, tenant_oauht2_provider_id: i64, update_tenant_o_auth2_provider: models::UpdateTenantOAuth2Provider) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/tenants/{tenant_id}/oauth2-providers/{tenant_oauht2_provider_id}".to_string())
        ;
        req = req.with_path_param("tenant_id".to_string(), tenant_id.to_string());
        req = req.with_path_param("tenant_oauht2_provider_id".to_string(), tenant_oauht2_provider_id.to_string());
        req = req.with_body_param(update_tenant_o_auth2_provider);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
